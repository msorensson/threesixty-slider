(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var ThreeSixty = __webpack_require__(1);

	(function($) {
	    $.fn.ThreeSixty = function(options) {
	        return this.each(function() {
	            new ThreeSixty(this, options);
	        });
	    };
	})(jQuery);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * 360 degree Image Slider v2.0.4
	 * http://gaurav.jassal.me
	 *
	 * Copyright 2015, gaurav@jassal.me
	 * Dual licensed under the MIT or GPL Version 3 licenses.
	 *
	 */

	'use strict';
	__webpack_require__(2);
	var assign = __webpack_require__(3);

	/**
	 * @class ThreeSixty
	 * **The ThreeSixty slider class**.
	 */
	var ThreeSixty = function(el, options) {
	    var self = this,
	        AppConfig,
	        frames = [];

	    self.el = el;
	    self.frames = [];

	    /**
	     * @method init
	     * The function extends the user options with default settings for the
	     * slider and initilize the slider.
	     */
	    self.init = function() {
	        AppConfig = assign(ThreeSixty.defaultOptions, options);
	        if(AppConfig.disableSpin) {
	            AppConfig.currentFrame = 1;
	            AppConfig.endFrame = 1;
	        }
	        self.initProgress();
	        self.loadImages();
	    };

	    /**
	     * @method initProgress
	     * The function sets initial styles and start the progress indicator
	     * to show loading of images.
	     *
	     * @private
	     */
	    self.initProgress = function() {
	        var spinner;

	        self.el.style.width = AppConfig.width + 'px';
	        self.el.style.height = AppConfig.height + 'px';
	        self.el.style.backgroundImage = 'none !important';

	        if(AppConfig.styles) {
	            for (var key in AppConfig.styles) {
	                self.el.style[key] = AppConfig.styles[key];
	            }
	        }

	        self.responsive();

	        spinner = self.el.querySelector(AppConfig.progress);
	        spinner.style.marginTop = ((AppConfig.height / 2) - 15) + 'px';
	    };

	    /**
	     * @method getNextImageByFolder
	     * @private
	     * The function returns the name of the next image based on index and folder path.
	     */
	    self.getNextImageByFolder = function() {
	        var selfIndex, host;

	        selfIndex = AppConfig.zeroSelfd ? 0 : 1;
	        return !AppConfig.imgArray ?
	            AppConfig.domain + AppConfig.imagePath + AppConfig.filePrefix + self.zeroPad((AppConfig.loadedImages + selfIndex)) + AppConfig.ext + ((self.browser.isIE()) ? '?' + new Date().getTime() : '') : AppConfig.imgArray[AppConfig.loadedImages];
	    };

	    /**
	     * @method loadImages
	     * @private
	     * The function asynchronously loads images and inject into the slider.
	     */
	    self.loadImages = function() {
	        var li, image, imageName, imageList;
	        imageName = self.getNextImageByFolder();

	        li = document.createElement('li');
	        image = document.createElement('img');

	        image.setAttribute('src', imageName);
	        image.classList.add('previous-image');
	        li.appendChild(image);

	        self.frames.push(image);

	        imageList = self.el.querySelector(AppConfig.imgList);
	        imageList.appendChild(li);

	        image.onload = function() {
	            self.imageLoaded();
	        };
	    };

	    /**
	     * @method imageLoaded
	     * @private
	     * The function gets triggers once the image is loaded. We also update
	     * the progress percentage in this function.
	     */
	    self.imageLoaded = function () {
	        var spinnerTextEl = self.el.querySelector(AppConfig.progress + ' span');
	        AppConfig.loadedImages += 1;
	        spinnerTextEl.innerHTML = Math.floor(AppConfig.loadedImages / AppConfig.totalFrames * 100) + '%';
	        if (AppConfig.loadedImages >= AppConfig.totalFrames) {
	            if(AppConfig.disableSpin) {
	                self.frames[0].classList.remove('previous-image');
	                self.frames[0].classList.add('current-image');
	            }

	            self.showImages();
	            self.showNavigation();
	        } else {
	            self.loadImages();
	        }
	    };

	    /**
	     * @method showImages
	     * @private
	     * This function is called when all the images are loaded.
	     * **The function does following operations**
	     * - Removes background image placeholder
	     * - Displays the 360 images
	     * - Initilizes mouse intraction events
	     */
	    self.showImages = function () {
	        var imgList = self.el.querySelector(AppConfig.imgList);
	        imgList.classList.add('visible');
	        self.ready = true;
	        AppConfig.ready = true;

	        if (AppConfig.drag) {
	            self.initEvents();
	        }
	        self.refresh();
	        AppConfig.onReady();

	        setTimeout(function() { self.responsive(); }, 50);
	    };

	    /**
	     * @method showNavigation
	     * Creates a navigation panel if navigation is set to true in the
	     * settings.
	     */
	    self.showNavigation = function() {
	        if (AppConfig.navigation && !AppConfig.navigation_init) {
	            var nav_bar, next, previous, play_stop;

	            nav_bar = document.createElement('div');
	            nav_bar.classList.add('nav_bar');

	            next = document.createElement('a');
	            next.classList.add('nav_bar_next');
	            next.setAttribute('href', '#');
	            next.innerHTML = 'next';

	            previous = document.createElement('a');
	            previous.classList.add('nav_bar_previous');
	            previous.setAttribute('href', '#');
	            previous.innerHTML = 'previous';

	            play_stop = document.createElement('a');
	            play_stop.classList.add('nav_bar_play');
	            play_stop.setAttribute('href', '#');
	            play_stop.innerHTML = 'play';

	            nav_bar.appendChild(previous);
	            nav_bar.appendChild(play_stop);
	            nav_bar.appendChild(next);

	            self.el.insertBefore(nav_bar, self.el.firstChild);

	            next.addEventListener('mousedown', self.next);
	            next.addEventListener('touchstart', self.next);

	            previous.addEventListener('mousedown', self.previous);
	            previous.addEventListener('touchstart', self.previous);

	            play_stop.addEventListener('mousedown', self.play_stop);
	            play_stop.addEventListener('touchstart', self.play_stop);
	            AppConfig.navigation_init = true;
	        }
	    };

	    /**
	     * @method play_stop
	     * @private
	     * Function toggles the autoplay rotation of 360 slider
	     * @param {Object} [event] jQuery events object.
	     *
	     */

	    self.play_stop = function(event) {
	        event.preventDefault();

	        if (!AppConfig.autoplay) {
	            AppConfig.autoplay = true;
	            AppConfig.play = setInterval(self.moveToNextFrame, AppConfig.playSpeed);
	            event.currentTarget.classList.remove('nav_bar_play');
	            event.currentTarget.classList.add('nav_bar_stop');
	        } else {
	            AppConfig.autoplay = false;
	            event.currentTarget.classList.remove('nav_bar_stop');
	            event.currentTarget.classList.add('nav_bar_play');
	            clearInterval(AppConfig.play);
	            AppConfig.play = null;
	        }
	    };

	    /**
	     * @method next
	     * Using this function you can rotate 360 to next 5 frames.
	     * @param {Object} [event] jQuery events object.
	     *
	     */
	    self.next = function(event) {
	        if (event) { event.preventDefault(); }
	        AppConfig.endFrame -= 5;
	        self.refresh();
	    };

	    /**
	     * @method previous
	     * Using this function you can rotate 360 to previous 5 frames.
	     * @param {Object} [event] jQuery events object.
	     *
	     */
	    self.previous = function(event) {
	        if (event) { event.preventDefault(); }
	        AppConfig.endFrame += 5;
	        self.refresh();
	    };

	    /**
	     * @method play
	     * You are start the auto rotaion for the slider with this function.
	     *
	     */
	    self.play = function(speed, direction) {
	        var _speed = speed || AppConfig.playSpeed;
	        var _direction = direction || AppConfig.autoplayDirection;
	        AppConfig.autoplayDirection = _direction;

	        if (!AppConfig.autoplay) {
	            AppConfig.autoplay = true;
	            AppConfig.play = setInterval(self.moveToNextFrame, _speed);
	        }
	    };

	    /**
	     * @method stop
	     * You can stop the auto rotation of the 360 slider with this function.
	     *
	     */
	    self.stop = function() {
	        if (AppConfig.autoplay) {
	            AppConfig.autoplay = false;
	            clearInterval(AppConfig.play);
	            AppConfig.play = null;
	        }
	    };

	    /**
	     * @method endFrame
	     * @private
	     * Function animates to previous frame
	     *
	     */
	    self.moveToNextFrame = function () {
	        if (AppConfig.autoplayDirection === 1) {
	            AppConfig.endFrame -= 1;
	        } else {
	            AppConfig.endFrame += 1;
	        }
	        self.refresh();
	    };

	    /**
	     * @method gotoAndPlay
	     * @public
	     * Function animates to previous frame
	     *
	     */
	    self.gotoAndPlay = function (n) {
	        if( AppConfig.disableWrap ) {
	            AppConfig.endFrame = n;
	            self.refresh();
	        } else {
	            // Since we could be looped around grab the multiplier
	            var multiplier = Math.ceil(AppConfig.endFrame / AppConfig.totalFrames);
	            if(multiplier === 0) {
	                multiplier = 1;
	            }

	            // Figure out the quickest path to the requested frame
	            var realEndFrame = (multiplier > 1) ?
	                    AppConfig.endFrame - ((multiplier - 1) * AppConfig.totalFrames) :
	                    AppConfig.endFrame;

	            var currentFromEnd = AppConfig.totalFrames - realEndFrame;

	            // Jump past end if it's faster
	            var newEndFrame = 0;
	            if(n - realEndFrame > 0) {
	                // Faster to move the difference ahead?
	                if(n - realEndFrame < realEndFrame + (AppConfig.totalFrames - n)) {
	                    newEndFrame = AppConfig.endFrame + (n - realEndFrame);
	                } else {
	                    newEndFrame = AppConfig.endFrame - (realEndFrame + (AppConfig.totalFrames - n));
	                }
	            } else {
	                // Faster to move the distance back?
	                if(realEndFrame - n < currentFromEnd + n) {
	                    newEndFrame = AppConfig.endFrame - (realEndFrame - n);
	                } else {
	                    newEndFrame = AppConfig.endFrame + (currentFromEnd + n);
	                }
	            }

	            // Now set the end frame
	            if(realEndFrame !== n) {
	                AppConfig.endFrame = newEndFrame;
	                self.refresh();
	            }
	        }
	    };


	    /**
	     * @method initEvents
	     * @private
	     * Function initilizes all the mouse and touch events for 360 slider movement.
	     *
	     */
	    self.initEvents = function () {
	        function multiEventListener(event) {
	            event.preventDefault();

	            if ((event.type === 'mousedown' && event.which === 1) || event.type === 'touchstart') {
	                AppConfig.pointerStartPosX = self.getPointerEvent(event).pageX;
	                AppConfig.dragging = true;
	                AppConfig.onDragStart(AppConfig.currentFrame);
	            } else if (event.type === 'touchmove') {
	                self.trackPointer(event);
	            } else if (event.type === 'touchend') {
	                AppConfig.dragging = false;
	                AppConfig.onDragStop(AppConfig.endFrame);
	            }
	        }

	        self.el.addEventListener('mousedown', multiEventListener);
	        self.el.addEventListener('touchstart', multiEventListener);
	        self.el.addEventListener('touchmove', multiEventListener);
	        self.el.addEventListener('touchend', multiEventListener);
	        self.el.addEventListener('click', multiEventListener);

	        function mouseUp(event) {
	            AppConfig.dragging = false;
	            AppConfig.onDragStop(AppConfig.endFrame);
	        }

	        document.addEventListener('mouseup', mouseUp);

	        window.addEventListener('resize', self.responsive.bind(self));

	        function mouseMove(event) {
	            if (AppConfig.dragging) {
	                event.preventDefault();
	            }
	            self.trackPointer(event);
	        }

	        document.addEventListener('mousemove', mouseMove);
	    };

	    /**
	     * @method getPointerEvent
	     * @private
	     * Function returns touch pointer events
	     *
	     * @params {Object} [event]
	     */
	    self.getPointerEvent = function (event) {
	        return event.targetTouches ? event.targetTouches[0] : event;
	    };

	    /**
	     * @method trackPointer
	     * @private
	     * Function calculates the distance between the start pointer and end pointer/
	     *
	     * @params {Object} [event]
	     */
	    self.trackPointer = function (event) {
	        if (AppConfig.ready && AppConfig.dragging) {
	            AppConfig.pointerEndPosX = self.getPointerEvent(event).pageX;
	            if (AppConfig.monitorStartTime < new Date().getTime() - AppConfig.monitorInt) {
	                AppConfig.pointerDistance = AppConfig.pointerEndPosX - AppConfig.pointerStartPosX;
	                if(AppConfig.pointerDistance > 0){
	                    AppConfig.endFrame = AppConfig.currentFrame + Math.ceil((AppConfig.totalFrames - 1) * AppConfig.speedMultiplier * (AppConfig.pointerDistance / self.el.offsetWidth));
	                }else{
	                    AppConfig.endFrame = AppConfig.currentFrame + Math.floor((AppConfig.totalFrames - 1) * AppConfig.speedMultiplier * (AppConfig.pointerDistance / self.el.offsetWidth));
	                }

	                if( AppConfig.disableWrap ) {
	                    AppConfig.endFrame = Math.min(AppConfig.totalFrames - (AppConfig.zeroSelfd ? 1 : 0), AppConfig.endFrame);
	                    AppConfig.endFrame = Math.max((AppConfig.zeroSelfd ? 0 : 1), AppConfig.endFrame);
	                }
	                self.refresh();
	                AppConfig.monitorStartTime = new Date().getTime();
	                AppConfig.pointerStartPosX = self.getPointerEvent(event).pageX;
	            }
	        }
	    };

	    /**
	     * @method refresh
	     * @public
	     * Function refeshes the timer and set interval for render cycle.
	     *
	     */
	    self.refresh = function () {
	        if (AppConfig.ticker === 0) {
	            AppConfig.ticker = setInterval(self.render, Math.round(1000 / AppConfig.framerate));
	        }
	    };

	    self.triggerFrameChangeEvent = function(current, total) {
	        var event = document.createEvent('Event');
	        event.current = current;
	        event.total = total;
	        event.initEvent('frameIndexChanged');
	        self.el.dispatchEvent(event);
	    };

	    /**
	     * @method refresh
	     * @private
	     * Function render the animation frames on the screen with easing effect.
	     */
	    self.render = function () {
	        var frameEasing;
	        if (AppConfig.currentFrame !== AppConfig.endFrame) {
	            frameEasing = AppConfig.endFrame < AppConfig.currentFrame ? Math.floor((AppConfig.endFrame - AppConfig.currentFrame) * 0.1) : Math.ceil((AppConfig.endFrame - AppConfig.currentFrame) * 0.1);
	            self.hidePreviousFrame();
	            AppConfig.currentFrame += frameEasing;
	            self.showCurrentFrame();
	            self.triggerFrameChangeEvent(self.getNormalizedCurrentFrame(), AppConfig.totalFrames);

	        } else {
	            window.clearInterval(AppConfig.ticker);
	            AppConfig.ticker = 0;
	        }
	    };

	    /**
	     * @method hidePreviousFrame
	     * @private
	     * Function hide the previous frame in the animation loop.
	     */
	    self.hidePreviousFrame = function () {
	        var frame = self.frames[self.getNormalizedCurrentFrame()];
	        frame.classList.remove('current-image');
	        frame.classList.add('previous-image');
	    };

	    /**
	     * @method showCurrentFrame
	     * @private
	     * Function shows the current frame in the animation loop.
	     */
	    self.showCurrentFrame = function () {
	        var frame = self.frames[self.getNormalizedCurrentFrame()];
	        frame.classList.remove('previous-image');
	        frame.classList.add('current-image');
	    };

	    /**
	     * @method getNormalizedCurrentFrame
	     * @private
	     * Function normalize and calculate the current frame once the user release the mouse and release touch event.
	     */
	    self.getNormalizedCurrentFrame = function () {
	        var c, e;

	        if ( !AppConfig.disableWrap ) {
	            c = Math.ceil(AppConfig.currentFrame % AppConfig.totalFrames);
	            if (c < 0) {
	                c += AppConfig.totalFrames - (AppConfig.zeroSelfd ? 1 : 0);
	            }
	        } else {
	            c = Math.min(AppConfig.currentFrame, AppConfig.totalFrames - (AppConfig.zeroSelfd ? 1 : 0));
	            e = Math.min(AppConfig.endFrame, AppConfig.totalFrames - (AppConfig.zeroSelfd ? 1 : 0));
	            c = Math.max(c, (AppConfig.zeroSelfd ? 0 : 1));
	            e = Math.max(e, (AppConfig.zeroSelfd ? 0 : 1));
	            AppConfig.currentFrame = c;
	            AppConfig.endFrame = e;
	        }

	        return c;
	    };

	    /*
	     * @method getCurrentFrame
	     * Function returns the current active frame.
	     *
	     * @return Number
	     */
	    self.getCurrentFrame = function() {
	        return AppConfig.currentFrame;
	    };

	    /*
	     * @method responsive
	     * Function calculates and set responsive height and width
	     *
	     */
	    self.responsive = function() {
	        var currentImage,
	            currentImageHeight;

	        if(AppConfig.responsive) {
	            currentImage = self.el.querySelector('.current-image');
	            currentImageHeight = currentImage && currentImage.offsetHeight;

	            self.el.style.height = currentImageHeight + 'px';
	            self.el.width = '100%';
	        }
	    };

	    /**
	     * Function to return with zero padding.
	     */
	    self.zeroPad = function (num) {
	        function pad(number, length) {
	            var str = number.toString();
	            if(AppConfig.zeroPadding) {
	                while (str.length < length) {
	                    str = '0' + str;
	                }
	            }
	            return str;
	        }

	        var approximateLog = Math.log(AppConfig.totalFrames) / Math.LN10;
	        var roundTo = 1e3;
	        var roundedLog = Math.round(approximateLog * roundTo) / roundTo;
	        var numChars = Math.floor(roundedLog) + 1;
	        return pad(num, numChars);
	    };

	    self.browser = {};

	    /**
	     * Function to detect if the brower is IE
	     * @return {boolean}
	     *
	     * http://msdn.microsoft.com/en-gb/library/ms537509(v=vs.85).aspx
	     */
	    self.browser.isIE = function () {
	        var rv = -1;
	        if (navigator.appName === 'Microsoft Internet Explorer')
	        {
	            var ua = navigator.userAgent;
	            var re  = new RegExp('MSIE ([0-9]{1,}[\\.0-9]{0,})');
	            if (re.exec(ua) !== null){
	                rv = parseFloat( RegExp.$1 );
	            }
	        }

	        return rv !== -1;
	    };

	    ThreeSixty.defaultOptions = {
	        /**
	         * @cfg {Boolean} dragging [dragging=false]
	         * @private
	         * Private propery contains a flags if users is in dragging mode.
	         */
	        dragging: false,
	        /**
	         * @cfg {Boolean} ready [ready=false]
	         * @private
	         * Private propery is set to true is all assets are loading and application is
	         * ready to render 360 slider.
	         */
	        ready: false,
	        /**
	         * @cfg {Number} pointerStartPosX
	         * @private
	         * private property mouse pointer start x position when user starts dragging slider.
	         */
	        pointerStartPosX: 0,
	        /**
	         * @cfg {Number} pointerEndPosX
	         * @private
	         * private property mouse pointer start x position when user end dragging slider.
	         */
	        pointerEndPosX: 0,
	        /**
	         * @cfg {Number} pointerDistance
	         * @private
	         * private property contains the distance between the pointerStartPosX and pointerEndPosX
	         */
	        pointerDistance: 0,
	        /**
	         * @cfg {Number} monitorStartTime
	         * @private
	         * private property contains time user took in dragging mouse from pointerStartPosX and pointerEndPosX
	         */
	        monitorStartTime: 0,
	        monitorInt: 10,
	        /**
	         * @cfg {Number} ticker
	         * @private
	         * Timer event that renders the 360
	         */
	        ticker: 0,
	        /**
	         * @cfg {Number} speedMultiplier
	         * This property controls the sensitivity for the 360 slider
	         */
	        speedMultiplier: 7,
	        /**
	         * @cfg {Number} totalFrames
	         * Set total number for frames used in the 360 rotation
	         */
	        totalFrames: 180,
	        /**
	         * @cfg {Number} currentFrame
	         * Current frame of the slider.
	         */
	        currentFrame: 0,
	        /**
	         * @cfg {Array} endFrame
	         * Private perperty contains information about the end frame when user slides the slider.
	         */
	        endFrame: 0,
	        /**
	         * @cfg {Number} loadedImages
	         * Private property contains count of loaded images.
	         */
	        loadedImages: 0,
	        /**
	         * @cfg {Array} framerate
	         * Set framerate for the slider animation
	         */
	        framerate: 60,
	        /**
	         * @cfg {String} domains
	         * Set comma seprated list of all parallel domain from where 360 assets needs to be loaded.
	         */
	        domains: null,
	        /**
	         * @cfg {String} domain
	         * Domain from where assets needs to be loaded. Use this propery is you want to load all assets from
	         * single domain.
	         */
	        domain: '',
	        /**
	         * @cfg {Boolean} parallel
	         * Set to true if you want to load assets from parallel domain. Default false
	         */
	        parallel: false,
	        /**
	         * @cfg {Number} queueAmount
	         * Set number of calls to be made on parallel domains.
	         */
	        queueAmount: 8,
	        /**
	         * @cfg {Number} idle
	         * Mouse Inactivite idle time in seconds. If set more than 0 will auto spine the slider
	         */
	        idle: 0,
	        /**
	         * @cfg {String} filePrefix
	         * Prefix for the image file name before the numeric value.
	         */
	        filePrefix: '',
	        /**
	         * @cfg {String} ext [ext=.png]
	         * Slider image extension.
	         */
	        ext: 'png',
	        /**
	         * @cfg {Object} height [300]
	         * Height of the slider
	         */
	        height: 300,
	        /**
	         * @cfg {Number} width [300]
	         * Width of the slider
	         */
	        width: 300,
	        /**
	         * @cfg {Object} styles
	         * CSS Styles for the 360 slider
	         */
	        styles: {},
	        /**
	         * @cfg {Boolean} navigation[false]
	         * State if navigation controls are visible or not.
	         */
	        navigation: false,
	        /**
	         * @cfg {Boolean} autoplay[false]
	         * Autoplay the 360 animation
	         */
	        autoplay: false,
	        /**
	         * @cfg {number} autoplayDirection [1]
	         * Direction for autoplay the 360 animation. 1 for right spin, and -1 for left spin.
	         */
	        autoplayDirection: 1,
	        /**
	         * Property to disable auto spin
	         * @type {Boolean}
	         */
	        disableSpin: false,
	        /**
	         * Property to disable infinite wrap
	         * @type {Boolean}
	         */
	        disableWrap: false,
	        /**
	         * Responsive width
	         * @type {Boolean}
	         */
	        responsive: false,
	        /**
	         * Zero Padding for filenames
	         * @type {Boolean}
	         */
	        zeroPadding: false,
	        /**
	         * Zero selfd for image filenames starting at 0
	         * @type {Boolean}
	         */
	        zeroSelfd: false,
	        /**
	         * @type {Array}
	         * List of plugins
	         */
	        plugins: [],
	        /**
	         * @type {Boolean}
	         * Show hand cursor on drag
	         */
	        showCursor: false,
	        /**
	         * @cfg {Boolean} drag
	         * Set it to false if you want to disable mousedrag or touch events
	         */
	        drag: true,
	        /**
	         * @cfg {Function} onReady
	         * Callback triggers once all images are loaded and ready to render on the screen
	         */
	        onReady: function() {},
	        /**
	         * @cfg {Function} onDragStart
	         * Callback triggers when a user initiates dragging
	         */
	        onDragStart: function() {},
	        /**
	         * @cfg {Function} onDragStop
	         * Callback triggers when a user releases after dragging
	         */
	        onDragStop: function() {},
	        /**
	         * @cfg {String} imgList
	         * Set ul element where image will be loaded
	         */
	        imgList: '.threesixty_images',
	        /**
	         * @cfg {Array} imgArray
	         * Use set of images in array to load images
	         */
	        imgArray: null,
	        /**
	         * @cfg {Number} playSpeed
	         * Value to control the speed of play button rotation
	         */
	        playSpeed: 100
	    };
	    self.init();
	};

	module.exports = ThreeSixty;


/***/ },
/* 2 */
/***/ function(module, exports) {

	/*
	 * classList.js: Cross-browser full element.classList implementation.
	 * 2014-07-23
	 *
	 * By Eli Grey, http://eligrey.com
	 * Public Domain.
	 * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
	 */

	/*global self, document, DOMException */

	/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js*/

	/* Copied from MDN:
	 * https://developer.mozilla.org/en-US/docs/Web/API/Element/classList
	 */

	if ("document" in window.self) {

	  // Full polyfill for browsers with no classList support
	  // Including IE < Edge missing SVGElement.classList
	  if (!("classList" in document.createElement("_"))
	    || document.createElementNS && !("classList" in document.createElementNS("http://www.w3.org/2000/svg","g"))) {

	  (function (view) {

	    "use strict";

	    if (!('Element' in view)) return;

	    var
	        classListProp = "classList"
	      , protoProp = "prototype"
	      , elemCtrProto = view.Element[protoProp]
	      , objCtr = Object
	      , strTrim = String[protoProp].trim || function () {
	        return this.replace(/^\s+|\s+$/g, "");
	      }
	      , arrIndexOf = Array[protoProp].indexOf || function (item) {
	        var
	            i = 0
	          , len = this.length
	        ;
	        for (; i < len; i++) {
	          if (i in this && this[i] === item) {
	            return i;
	          }
	        }
	        return -1;
	      }
	      // Vendors: please allow content code to instantiate DOMExceptions
	      , DOMEx = function (type, message) {
	        this.name = type;
	        this.code = DOMException[type];
	        this.message = message;
	      }
	      , checkTokenAndGetIndex = function (classList, token) {
	        if (token === "") {
	          throw new DOMEx(
	              "SYNTAX_ERR"
	            , "An invalid or illegal string was specified"
	          );
	        }
	        if (/\s/.test(token)) {
	          throw new DOMEx(
	              "INVALID_CHARACTER_ERR"
	            , "String contains an invalid character"
	          );
	        }
	        return arrIndexOf.call(classList, token);
	      }
	      , ClassList = function (elem) {
	        var
	            trimmedClasses = strTrim.call(elem.getAttribute("class") || "")
	          , classes = trimmedClasses ? trimmedClasses.split(/\s+/) : []
	          , i = 0
	          , len = classes.length
	        ;
	        for (; i < len; i++) {
	          this.push(classes[i]);
	        }
	        this._updateClassName = function () {
	          elem.setAttribute("class", this.toString());
	        };
	      }
	      , classListProto = ClassList[protoProp] = []
	      , classListGetter = function () {
	        return new ClassList(this);
	      }
	    ;
	    // Most DOMException implementations don't allow calling DOMException's toString()
	    // on non-DOMExceptions. Error's toString() is sufficient here.
	    DOMEx[protoProp] = Error[protoProp];
	    classListProto.item = function (i) {
	      return this[i] || null;
	    };
	    classListProto.contains = function (token) {
	      token += "";
	      return checkTokenAndGetIndex(this, token) !== -1;
	    };
	    classListProto.add = function () {
	      var
	          tokens = arguments
	        , i = 0
	        , l = tokens.length
	        , token
	        , updated = false
	      ;
	      do {
	        token = tokens[i] + "";
	        if (checkTokenAndGetIndex(this, token) === -1) {
	          this.push(token);
	          updated = true;
	        }
	      }
	      while (++i < l);

	      if (updated) {
	        this._updateClassName();
	      }
	    };
	    classListProto.remove = function () {
	      var
	          tokens = arguments
	        , i = 0
	        , l = tokens.length
	        , token
	        , updated = false
	        , index
	      ;
	      do {
	        token = tokens[i] + "";
	        index = checkTokenAndGetIndex(this, token);
	        while (index !== -1) {
	          this.splice(index, 1);
	          updated = true;
	          index = checkTokenAndGetIndex(this, token);
	        }
	      }
	      while (++i < l);

	      if (updated) {
	        this._updateClassName();
	      }
	    };
	    classListProto.toggle = function (token, force) {
	      token += "";

	      var
	          result = this.contains(token)
	        , method = result ?
	          force !== true && "remove"
	        :
	          force !== false && "add"
	      ;

	      if (method) {
	        this[method](token);
	      }

	      if (force === true || force === false) {
	        return force;
	      } else {
	        return !result;
	      }
	    };
	    classListProto.toString = function () {
	      return this.join(" ");
	    };

	    if (objCtr.defineProperty) {
	      var classListPropDesc = {
	          get: classListGetter
	        , enumerable: true
	        , configurable: true
	      };
	      try {
	        objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
	      } catch (ex) { // IE 8 doesn't support enumerable:true
	        if (ex.number === -0x7FF5EC54) {
	          classListPropDesc.enumerable = false;
	          objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
	        }
	      }
	    } else if (objCtr[protoProp].__defineGetter__) {
	      elemCtrProto.__defineGetter__(classListProp, classListGetter);
	    }

	    }(window.self));

	    } else {
	    // There is full or partial native classList support, so just check if we need
	    // to normalize the add/remove and toggle APIs.

	    (function () {
	      "use strict";

	      var testElement = document.createElement("_");

	      testElement.classList.add("c1", "c2");

	      // Polyfill for IE 10/11 and Firefox <26, where classList.add and
	      // classList.remove exist but support only one argument at a time.
	      if (!testElement.classList.contains("c2")) {
	        var createMethod = function(method) {
	          var original = DOMTokenList.prototype[method];

	          DOMTokenList.prototype[method] = function(token) {
	            var i, len = arguments.length;

	            for (i = 0; i < len; i++) {
	              token = arguments[i];
	              original.call(this, token);
	            }
	          };
	        };
	        createMethod('add');
	        createMethod('remove');
	      }

	      testElement.classList.toggle("c3", false);

	      // Polyfill for IE 10 and Firefox <24, where classList.toggle does not
	      // support the second argument.
	      if (testElement.classList.contains("c3")) {
	        var _toggle = DOMTokenList.prototype.toggle;

	        DOMTokenList.prototype.toggle = function(token, force) {
	          if (1 in arguments && !this.contains(token) === !force) {
	            return force;
	          } else {
	            return _toggle.call(this, token);
	          }
	        };

	      }

	      testElement = null;
	    }());
	  }
	}


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(4),
	    copyObject = __webpack_require__(7),
	    createAssigner = __webpack_require__(8),
	    isArrayLike = __webpack_require__(29),
	    isPrototype = __webpack_require__(32),
	    keys = __webpack_require__(33);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Assigns own enumerable string keyed properties of source objects to the
	 * destination object. Source objects are applied from left to right.
	 * Subsequent sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object` and is loosely based on
	 * [`Object.assign`](https://mdn.io/Object/assign).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.10.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.assignIn
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * function Bar() {
	 *   this.c = 3;
	 * }
	 *
	 * Foo.prototype.b = 2;
	 * Bar.prototype.d = 4;
	 *
	 * _.assign({ 'a': 0 }, new Foo, new Bar);
	 * // => { 'a': 1, 'c': 3 }
	 */
	var assign = createAssigner(function(object, source) {
	  if (isPrototype(source) || isArrayLike(source)) {
	    copyObject(source, keys(source), object);
	    return;
	  }
	  for (var key in source) {
	    if (hasOwnProperty.call(source, key)) {
	      assignValue(object, key, source[key]);
	    }
	  }
	});

	module.exports = assign;


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(5),
	    eq = __webpack_require__(6);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    baseAssignValue(object, key, value);
	  }
	}

	module.exports = assignValue;


/***/ },
/* 5 */
/***/ function(module, exports) {

	/** Built-in value references. */
	var defineProperty = Object.defineProperty;

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && defineProperty) {
	    defineProperty(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	module.exports = baseAssignValue;


/***/ },
/* 6 */
/***/ function(module, exports) {

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	module.exports = eq;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(4),
	    baseAssignValue = __webpack_require__(5);

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      baseAssignValue(object, key, newValue);
	    } else {
	      assignValue(object, key, newValue);
	    }
	  }
	  return object;
	}

	module.exports = copyObject;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var baseRest = __webpack_require__(9),
	    isIterateeCall = __webpack_require__(28);

	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return baseRest(function(object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;

	    customizer = (assigner.length > 3 && typeof customizer == 'function')
	      ? (length--, customizer)
	      : undefined;

	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}

	module.exports = createAssigner;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(10),
	    overRest = __webpack_require__(11),
	    setToString = __webpack_require__(13);

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  return setToString(overRest(func, start, identity), func + '');
	}

	module.exports = baseRest;


/***/ },
/* 10 */
/***/ function(module, exports) {

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(12);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest(func, start, transform) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}

	module.exports = overRest;


/***/ },
/* 12 */
/***/ function(module, exports) {

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	module.exports = apply;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var baseSetToString = __webpack_require__(14),
	    shortOut = __webpack_require__(27);

	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString = shortOut(baseSetToString);

	module.exports = setToString;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var constant = __webpack_require__(15),
	    identity = __webpack_require__(10),
	    nativeDefineProperty = __webpack_require__(16);

	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString = !nativeDefineProperty ? identity : function(func, string) {
	  return nativeDefineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};

	module.exports = baseSetToString;


/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}

	module.exports = constant;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(17);

	/* Built-in method references that are verified to be native. */
	var nativeDefineProperty = getNative(Object, 'defineProperty');

	module.exports = nativeDefineProperty;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsNative = __webpack_require__(18),
	    getValue = __webpack_require__(26);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(19),
	    isMasked = __webpack_require__(21),
	    isObject = __webpack_require__(20),
	    toSource = __webpack_require__(25);

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	module.exports = baseIsNative;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(20);

	/** `Object#toString` result references. */
	var funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	module.exports = isFunction;


/***/ },
/* 20 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var coreJsData = __webpack_require__(22);

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	module.exports = isMasked;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(23);

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	module.exports = coreJsData;


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(24);

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	module.exports = root;


/***/ },
/* 24 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	module.exports = freeGlobal;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 25 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var funcProto = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	module.exports = toSource;


/***/ },
/* 26 */
/***/ function(module, exports) {

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	module.exports = getValue;


/***/ },
/* 27 */
/***/ function(module, exports) {

	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 500,
	    HOT_SPAN = 16;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeNow = Date.now;

	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut(func) {
	  var count = 0,
	      lastCalled = 0;

	  return function() {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);

	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}

	module.exports = shortOut;


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(6),
	    isArrayLike = __webpack_require__(29),
	    isIndex = __webpack_require__(31),
	    isObject = __webpack_require__(20);

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}

	module.exports = isIterateeCall;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(19),
	    isLength = __webpack_require__(30);

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	module.exports = isArrayLike;


/***/ },
/* 30 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ },
/* 31 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	module.exports = isIndex;


/***/ },
/* 32 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	module.exports = isPrototype;


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(34),
	    baseKeys = __webpack_require__(40),
	    isArrayLike = __webpack_require__(29);

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	module.exports = keys;


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	var baseTimes = __webpack_require__(35),
	    isArguments = __webpack_require__(36),
	    isArray = __webpack_require__(39),
	    isIndex = __webpack_require__(31);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  // Safari 9 makes `arguments.length` enumerable in strict mode.
	  var result = (isArray(value) || isArguments(value))
	    ? baseTimes(value.length, String)
	    : [];

	  var length = result.length,
	      skipIndexes = !!length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = arrayLikeKeys;


/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	module.exports = baseTimes;


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var isArrayLikeObject = __webpack_require__(37);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	module.exports = isArguments;


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(29),
	    isObjectLike = __webpack_require__(38);

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	module.exports = isArrayLikeObject;


/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	module.exports = isArray;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var isPrototype = __webpack_require__(32),
	    nativeKeys = __webpack_require__(41);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = baseKeys;


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(42);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);

	module.exports = nativeKeys;


/***/ },
/* 42 */
/***/ function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	module.exports = overArg;


/***/ }
/******/ ])
});
;